{"ast":null,"code":"'use strict';\n\nvar createVisitor = require('./create_visitor');\n/**\n * Visitor for the AST to construct a path with filled in parameters\n * @class ReverseVisitor\n * @borrows Visitor-visit\n */\n\n\nvar ReverseVisitor = createVisitor({\n  'Concat': function (node, context) {\n    var childResults = node.children.map(function (child) {\n      return this.visit(child, context);\n    }.bind(this));\n\n    if (childResults.some(function (c) {\n      return c === false;\n    })) {\n      return false;\n    } else {\n      return childResults.join('');\n    }\n  },\n  'Literal': function (node) {\n    return decodeURI(node.props.value);\n  },\n  'Splat': function (node, context) {\n    if (context[node.props.name]) {\n      return context[node.props.name];\n    } else {\n      return false;\n    }\n  },\n  'Param': function (node, context) {\n    if (context[node.props.name]) {\n      return context[node.props.name];\n    } else {\n      return false;\n    }\n  },\n  'Optional': function (node, context) {\n    var childResult = this.visit(node.children[0], context);\n\n    if (childResult) {\n      return childResult;\n    } else {\n      return '';\n    }\n  },\n  'Root': function (node, context) {\n    context = context || {};\n    var childResult = this.visit(node.children[0], context);\n\n    if (!childResult) {\n      return false;\n    }\n\n    return encodeURI(childResult);\n  }\n});\nmodule.exports = ReverseVisitor;","map":{"version":3,"sources":["/workspace/frontend/node_modules/route-parser/lib/route/visitors/reverse.js"],"names":["createVisitor","require","ReverseVisitor","node","context","childResults","children","map","child","visit","bind","some","c","join","decodeURI","props","value","name","childResult","encodeURI","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,aAAa,GAAIC,OAAO,CAAC,kBAAD,CAA5B;AAEA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,cAAc,GAAGF,aAAa,CAAC;AACjC,YAAU,UAASG,IAAT,EAAeC,OAAf,EAAwB;AAChC,QAAIC,YAAY,GAAIF,IAAI,CAACG,QAAL,CACjBC,GADiB,CACZ,UAASC,KAAT,EAAgB;AACpB,aAAO,KAAKC,KAAL,CAAWD,KAAX,EAAiBJ,OAAjB,CAAP;AACD,KAFK,CAEJM,IAFI,CAEC,IAFD,CADY,CAApB;;AAKA,QAAIL,YAAY,CAACM,IAAb,CAAkB,UAASC,CAAT,EAAY;AAAE,aAAOA,CAAC,KAAK,KAAb;AAAqB,KAArD,CAAJ,EAA6D;AAC3D,aAAO,KAAP;AACD,KAFD,MAGK;AACH,aAAOP,YAAY,CAACQ,IAAb,CAAkB,EAAlB,CAAP;AACD;AACF,GAbgC;AAejC,aAAW,UAASV,IAAT,EAAe;AACxB,WAAOW,SAAS,CAACX,IAAI,CAACY,KAAL,CAAWC,KAAZ,CAAhB;AACD,GAjBgC;AAmBjC,WAAS,UAASb,IAAT,EAAeC,OAAf,EAAwB;AAC/B,QAAIA,OAAO,CAACD,IAAI,CAACY,KAAL,CAAWE,IAAZ,CAAX,EAA+B;AAC7B,aAAOb,OAAO,CAACD,IAAI,CAACY,KAAL,CAAWE,IAAZ,CAAd;AACD,KAFD,MAGK;AACH,aAAO,KAAP;AACD;AACF,GA1BgC;AA4BjC,WAAS,UAASd,IAAT,EAAeC,OAAf,EAAwB;AAC/B,QAAIA,OAAO,CAACD,IAAI,CAACY,KAAL,CAAWE,IAAZ,CAAX,EAA+B;AAC7B,aAAOb,OAAO,CAACD,IAAI,CAACY,KAAL,CAAWE,IAAZ,CAAd;AACD,KAFD,MAGK;AACH,aAAO,KAAP;AACD;AACF,GAnCgC;AAqCjC,cAAY,UAASd,IAAT,EAAeC,OAAf,EAAwB;AAClC,QAAIc,WAAW,GAAG,KAAKT,KAAL,CAAWN,IAAI,CAACG,QAAL,CAAc,CAAd,CAAX,EAA6BF,OAA7B,CAAlB;;AACA,QAAIc,WAAJ,EAAkB;AAChB,aAAOA,WAAP;AACD,KAFD,MAGK;AACH,aAAO,EAAP;AACD;AACF,GA7CgC;AA+CjC,UAAQ,UAASf,IAAT,EAAeC,OAAf,EAAwB;AAC9BA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,QAAIc,WAAW,GAAG,KAAKT,KAAL,CAAWN,IAAI,CAACG,QAAL,CAAc,CAAd,CAAX,EAA6BF,OAA7B,CAAlB;;AACA,QAAI,CAACc,WAAL,EAAmB;AACjB,aAAO,KAAP;AACD;;AACD,WAAOC,SAAS,CAACD,WAAD,CAAhB;AACD;AAtDgC,CAAD,CAAlC;AAyDAE,MAAM,CAACC,OAAP,GAAiBnB,cAAjB","sourcesContent":["'use strict';\n\nvar createVisitor  = require('./create_visitor');\n\n/**\n * Visitor for the AST to construct a path with filled in parameters\n * @class ReverseVisitor\n * @borrows Visitor-visit\n */\nvar ReverseVisitor = createVisitor({\n  'Concat': function(node, context) {\n    var childResults =  node.children\n      .map( function(child) {\n        return this.visit(child,context);\n      }.bind(this));\n\n    if( childResults.some(function(c) { return c === false; }) ) {\n      return false;\n    }\n    else {\n      return childResults.join('');\n    }\n  },\n\n  'Literal': function(node) {\n    return decodeURI(node.props.value);\n  },\n\n  'Splat': function(node, context) {\n    if( context[node.props.name] ) {\n      return context[node.props.name];\n    }\n    else {\n      return false;\n    }\n  },\n\n  'Param': function(node, context) {\n    if( context[node.props.name] ) {\n      return context[node.props.name];\n    }\n    else {\n      return false;\n    }\n  },\n\n  'Optional': function(node, context) {\n    var childResult = this.visit(node.children[0], context);\n    if( childResult ) {\n      return childResult;\n    }\n    else {\n      return '';\n    }\n  },\n\n  'Root': function(node, context) {\n    context = context || {};\n    var childResult = this.visit(node.children[0], context);\n    if( !childResult ) {\n      return false;\n    }\n    return encodeURI(childResult);\n  }\n});\n\nmodule.exports = ReverseVisitor;"]},"metadata":{},"sourceType":"script"}