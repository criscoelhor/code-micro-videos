{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/workspace/frontend/src/components/Breadcrumb.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport { Route } from 'react-router';\nimport { Link as RouterLink } from 'react-router-dom';\nimport routes from '../routes';\nimport RouteParser from 'route-parser';\nimport { Container } from '@material-ui/core';\nconst breadcrumbNameMap = {};\nroutes.forEach(route => breadcrumbNameMap[route.path] = route.label);\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  item: {\n    color: \"#4db5ab\"\n  }\n}));\n\nconst LinkRouter = props => /*#__PURE__*/_jsxDEV(Link, { ...props,\n  component: RouterLink\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 33,\n  columnNumber: 48\n}, this);\n\n_c = LinkRouter;\nexport default function RouterBreadcrumbs() {\n  _s();\n\n  const classes = useStyles();\n\n  function makeBreadcrumb(location) {\n    const pathnames = location.pathname.split('/').filter(x => x);\n    pathnames.unshift('/');\n    return /*#__PURE__*/_jsxDEV(Breadcrumbs, {\n      \"aria-label\": \"breadcrumb\",\n      children: pathnames.map((value, index) => {\n        const last = index === pathnames.length - 1;\n        const to = `${pathnames.slice(0, index + 1).join('/').replace('//', '/')}`;\n        const route = Object.keys(breadcrumbNameMap).find(path => new RouteParser(path).match(to));\n\n        if (route === undefined) {\n          return false;\n        }\n\n        return last ? /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"textPrimary\",\n          children: breadcrumbNameMap[route]\n        }, to, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(LinkRouter, {\n          color: \"inherit\",\n          to: to,\n          children: breadcrumbNameMap[route]\n        }, to, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Route, {\n      children: ({\n        location\n      }) => makeBreadcrumb(location)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RouterBreadcrumbs, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = RouterBreadcrumbs;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LinkRouter\");\n$RefreshReg$(_c2, \"RouterBreadcrumbs\");","map":{"version":3,"sources":["/workspace/frontend/src/components/Breadcrumb.tsx"],"names":["React","makeStyles","createStyles","Link","Typography","Breadcrumbs","Route","RouterLink","routes","RouteParser","Container","breadcrumbNameMap","forEach","route","path","label","useStyles","theme","root","display","flexDirection","item","color","LinkRouter","props","RouterBreadcrumbs","classes","makeBreadcrumb","location","pathnames","pathname","split","filter","x","unshift","map","value","index","last","length","to","slice","join","replace","Object","keys","find","match","undefined"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Link, { LinkProps } from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport { Route } from 'react-router';\nimport { Link as RouterLink } from 'react-router-dom';\nimport {Location} from 'history';\nimport routes from '../routes';\nimport RouteParser from 'route-parser';\nimport { Container } from '@material-ui/core';\n\nconst breadcrumbNameMap: { [key: string]: string } = {};\nroutes.forEach(route => breadcrumbNameMap[route.path as string] = route.label)\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    item: {\n      color: \"#4db5ab\",\n    }\n  }),\n);\n\ninterface LinkRouterProps extends LinkProps {\n  to: string;\n  replace?: boolean;\n}\n\nconst LinkRouter = (props: LinkRouterProps) => <Link {...props} component={RouterLink as any} />;\n\nexport default function RouterBreadcrumbs() {\n  const classes = useStyles();\n\n  function makeBreadcrumb(location: Location){\n    \n    const pathnames = location.pathname.split('/').filter((x) => x);\n    pathnames.unshift('/');\n    return (\n        <Breadcrumbs aria-label=\"breadcrumb\">   \n          {\n              pathnames.map((value, index) => {\n                const last = index === pathnames.length - 1;\n                const to = `${pathnames.slice(0, index + 1).join('/').replace('//','/')}`;\n                const route = Object\n                  .keys(breadcrumbNameMap)\n                  .find(\n                      path => new RouteParser(path).match(to)\n                  );\n\n                if(route === undefined){\n                  return false;\n                }\n\n                return last ? (\n                    <Typography color=\"textPrimary\" key={to}>\n                        {breadcrumbNameMap[route]}\n                    </Typography>\n                ) : (\n                    <LinkRouter color=\"inherit\" to={to} key={to} >\n                        {breadcrumbNameMap[route]}\n                    </LinkRouter>\n                );\n            })\n          }\n        </Breadcrumbs>\n    );\n  }\n\n  return (\n    <Container>    \n        <Route>\n          {\n            ({location}: {location: Location}) => makeBreadcrumb(location)         \n          }\n        </Route>  \n    </Container>\n  );\n}"]},"metadata":{},"sourceType":"module"}